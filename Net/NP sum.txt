17 {
epoll: select와 달리 파일디스크립터 정보를 한번씩만 전달하면 됨(select는 호출할때 마다 전달)
리눅스 커널에서 관찰대상정보를 기억하는방식

epoll_create(int epoll_size)
epoll_ctl(epoll_fd, EPOLL_CTL_ADD|EPOLL_CTL_DEL, check_fd, event)
epoll_wait(epoll_fd, events, epoll_size, timeout)

select & epoll 소켓변화관찰이 요구됨 -> 운영체제에 관찰대상정보를 전달

레벨트리거 -> 입력버퍼가 비어있지 않으면 이벤트 지속발생(default)
엣지트리거 -> 입력버퍼에 데이터가 들어올 때 발생 => 입출력의 완료처리를 해주어야 함(errno == EAGAIN)
}

18, 20 {
쓰레드, 컨텍스트 스위칭, 메모리공유를 통한 통신기법 무필요
임계영역 동기화(Mutex, Semaphore + windows: Event, Critical Section)
Mutex -> 하나만 lock 

pthread_mutex_init(mutex변수, NULL)
pthread_mutex_lock(&mutex)
pthread_mutex_unlock(&mutex)
pthread_mutex_destroy(&mutex)

Semaphore -> 0이면 lock(signaled), 0보다 크면 풀림(non-signaled)
	       wait(0이 아닐때 까지 기다림), post(Semaphore값을 1 감소시킴)
	       
sem_init(&sem, 초기값, 최대값)
sem_post(&sem)
sem_wait(&sem)
sem_destroy(&sem)

}

19 {
커널오브젝트 생성 -> 핸들 반환: 쓰레드와 관련된 정보 저장
signaled, non-signaled

WaitForSingleObject -> signaled상태가 되면 반환
auto-reset: 반환되면 자동으로 non-signaled
manual-reset: 반환되도 signaled로 남아있음, 수동으로 non-signaled로 변환해야함
}

21 {
동기입출력: 호출한 함수가 반환하는 시점이 데이터 송수신이 완료되는 시점과 일치하는 경우(select)
비동기입출력: 데이터 송수신 완료와 상관없이 함수가 반환을 진행함 -> 블락되지 않음(WSAEventSelect)
입출력 확인 필요
}

플젝: 실행파일, 데모영상, 보고서(자유양식->개발환경, 실행환경, 만든내용:flow diagram) + 풀코드(alpha) 22일
교수님 메일로 전송
